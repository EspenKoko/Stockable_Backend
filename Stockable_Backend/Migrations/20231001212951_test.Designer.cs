// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stockable_Backend.Model;

#nullable disable

namespace Stockable_Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231001212951_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Stockable_Backend.Model.AssignedPrinter", b =>
                {
                    b.Property<int>("assignedPrinterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("assignedPrinterId"), 1L, 1);

                    b.Property<int>("clientId")
                        .HasColumnType("int");

                    b.Property<string>("printerModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("printerStatusId")
                        .HasColumnType("int");

                    b.Property<string>("serialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("assignedPrinterId");

                    b.HasIndex("clientId");

                    b.HasIndex("printerStatusId");

                    b.ToTable("AssignedPrinters");
                });

            modelBuilder.Entity("Stockable_Backend.Model.AssignedTechnician", b =>
                {
                    b.Property<int>("errorLogId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("employeeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("errorLogId", "employeeId");

                    b.HasIndex("employeeId");

                    b.ToTable("AssignedTechnicians");
                });

            modelBuilder.Entity("Stockable_Backend.Model.AuditTrail", b =>
                {
                    b.Property<int>("auditTrailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("auditTrailId"), 1L, 1);

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("userAction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("auditTrailId");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("Stockable_Backend.Model.Branch", b =>
                {
                    b.Property<int>("branchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("branchId"), 1L, 1);

                    b.Property<int?>("assignedPrinterId")
                        .HasColumnType("int");

                    b.Property<string>("branchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("cityId")
                        .HasColumnType("int");

                    b.Property<int>("clientId")
                        .HasColumnType("int");

                    b.HasKey("branchId");

                    b.HasIndex("assignedPrinterId");

                    b.HasIndex("cityId");

                    b.HasIndex("clientId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Stockable_Backend.Model.ChatBotInteraction", b =>
                {
                    b.Property<int>("botInteractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("botInteractionId"), 1L, 1);

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("botInteractionId");

                    b.ToTable("ChatBotInteractions");
                });

            modelBuilder.Entity("Stockable_Backend.Model.City", b =>
                {
                    b.Property<int>("cityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cityId"), 1L, 1);

                    b.Property<string>("cityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("provinceId")
                        .HasColumnType("int");

                    b.HasKey("cityId");

                    b.HasIndex("provinceId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Stockable_Backend.Model.Client", b =>
                {
                    b.Property<int>("clientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("clientId"), 1L, 1);

                    b.Property<string>("clientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("clientEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("clientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("clientNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("clientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Stockable_Backend.Model.ClientInvoice", b =>
                {
                    b.Property<int>("clientInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("clientInvoiceId"), 1L, 1);

                    b.Property<DateTime>("clientInvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("clientInvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("clientInvoiceId");

                    b.ToTable("ClientInvoices");
                });

            modelBuilder.Entity("Stockable_Backend.Model.ClientOrder", b =>
                {
                    b.Property<int>("clientOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("clientOrderId"), 1L, 1);

                    b.Property<int>("clientInvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("clientOrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("clientUserId")
                        .HasColumnType("int");

                    b.Property<int>("paymentTypeId")
                        .HasColumnType("int");

                    b.HasKey("clientOrderId");

                    b.HasIndex("clientInvoiceId");

                    b.HasIndex("clientOrderStatusId");

                    b.HasIndex("clientUserId");

                    b.HasIndex("paymentTypeId");

                    b.ToTable("ClientOrders");
                });

            modelBuilder.Entity("Stockable_Backend.Model.ClientOrderStatus", b =>
                {
                    b.Property<int>("clientOrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("clientOrderStatusId"), 1L, 1);

                    b.Property<string>("clientOrderStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("clientOrderStatusId");

                    b.ToTable("ClientOrderStatus");
                });

            modelBuilder.Entity("Stockable_Backend.Model.ClientOrderStock", b =>
                {
                    b.Property<int>("stockId")
                        .HasColumnType("int");

                    b.Property<int>("clientOrderId")
                        .HasColumnType("int");

                    b.Property<int>("qty")
                        .HasColumnType("int");

                    b.HasKey("stockId", "clientOrderId");

                    b.HasIndex("clientOrderId");

                    b.ToTable("ClientOrderStocks");
                });

            modelBuilder.Entity("Stockable_Backend.Model.ClientUser", b =>
                {
                    b.Property<int>("clientUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("clientUserId"), 1L, 1);

                    b.Property<int>("branchId")
                        .HasColumnType("int");

                    b.Property<int>("clientId")
                        .HasColumnType("int");

                    b.Property<string>("clientUserPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("clientUserId");

                    b.HasIndex("branchId");

                    b.HasIndex("clientId");

                    b.HasIndex("userId");

                    b.ToTable("ClientUsers");
                });

            modelBuilder.Entity("Stockable_Backend.Model.ClientUserRequest", b =>
                {
                    b.Property<int>("clientUserRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("clientUserRequestId"), 1L, 1);

                    b.Property<int>("branchId")
                        .HasColumnType("int");

                    b.Property<string>("clientUserPosition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("userCreated")
                        .HasColumnType("bit");

                    b.HasKey("clientUserRequestId");

                    b.HasIndex("branchId");

                    b.ToTable("ClientUserRequests");
                });

            modelBuilder.Entity("Stockable_Backend.Model.Diagnostics", b =>
                {
                    b.Property<int>("diagnosticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("diagnosticsId"), 1L, 1);

                    b.Property<bool>("beltCheck")
                        .HasColumnType("bit");

                    b.Property<string>("diagnosticComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ethernetPortCheck")
                        .HasColumnType("bit");

                    b.Property<bool>("hopperCheck")
                        .HasColumnType("bit");

                    b.Property<bool>("lcdScreenCheck")
                        .HasColumnType("bit");

                    b.Property<bool>("motherboardCheck")
                        .HasColumnType("bit");

                    b.Property<bool>("powerSupplyCheck")
                        .HasColumnType("bit");

                    b.Property<int>("repairId")
                        .HasColumnType("int");

                    b.Property<bool>("rollerCheck")
                        .HasColumnType("bit");

                    b.HasKey("diagnosticsId");

                    b.HasIndex("repairId");

                    b.ToTable("Diagnostics");
                });

            modelBuilder.Entity("Stockable_Backend.Model.Employee", b =>
                {
                    b.Property<int>("employeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("employeeId"), 1L, 1);

                    b.Property<DateTime>("empHireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("employeeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("employeeId");

                    b.HasIndex("employeeTypeId");

                    b.HasIndex("userId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Stockable_Backend.Model.EmployeeType", b =>
                {
                    b.Property<int>("employeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("employeeTypeId"), 1L, 1);

                    b.Property<string>("employeeTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("employeeTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("employeeTypeId");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("Stockable_Backend.Model.ErrorCode", b =>
                {
                    b.Property<int>("errorCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("errorCodeId"), 1L, 1);

                    b.Property<string>("errorCodeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("errorCodeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("errorCodeId");

                    b.ToTable("ErrorCodes");
                });

            modelBuilder.Entity("Stockable_Backend.Model.ErrorLog", b =>
                {
                    b.Property<int>("errorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("errorLogId"), 1L, 1);

                    b.Property<int>("assignedPrinterId")
                        .HasColumnType("int");

                    b.Property<int>("clientUserId")
                        .HasColumnType("int");

                    b.Property<int>("errorCodeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("errorLogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("errorLogDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("errorLogStatusId")
                        .HasColumnType("int");

                    b.HasKey("errorLogId");

                    b.HasIndex("assignedPrinterId");

                    b.HasIndex("clientUserId");

                    b.HasIndex("errorCodeId");

                    b.HasIndex("errorLogStatusId");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("Stockable_Backend.Model.ErrorLogStatus", b =>
                {
                    b.Property<int>("errorLogStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("errorLogStatusId"), 1L, 1);

                    b.Property<string>("errorLogStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("errorLogStatusId");

                    b.ToTable("ErrorLogStatuses");
                });

            modelBuilder.Entity("Stockable_Backend.Model.Help", b =>
                {
                    b.Property<int>("helpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("helpId"), 1L, 1);

                    b.Property<string>("helpDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("helpName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("helpId");

                    b.ToTable("Help");
                });

            modelBuilder.Entity("Stockable_Backend.Model.Hub", b =>
                {
                    b.Property<int>("hubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("hubId"), 1L, 1);

                    b.Property<int>("cityId")
                        .HasColumnType("int");

                    b.Property<string>("hubName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("hubPrinterThreshold")
                        .HasColumnType("int");

                    b.Property<int>("qtyOnHand")
                        .HasColumnType("int");

                    b.HasKey("hubId");

                    b.HasIndex("cityId");

                    b.ToTable("Hubs");
                });

            modelBuilder.Entity("Stockable_Backend.Model.HubUser", b =>
                {
                    b.Property<int>("hubUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("hubUserId"), 1L, 1);

                    b.Property<int>("hubId")
                        .HasColumnType("int");

                    b.Property<string>("hubUserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hubUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hubUserPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hubUserPostion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hubUserSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<string>("userId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("hubUserId");

                    b.HasIndex("hubId");

                    b.HasIndex("userId1");

                    b.ToTable("HubUsers");
                });

            modelBuilder.Entity("Stockable_Backend.Model.LabourRate", b =>
                {
                    b.Property<int>("labourRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("labourRateId"), 1L, 1);

                    b.Property<decimal>("labourRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("labourRateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("labourRateId");

                    b.ToTable("LabourRates");
                });

            modelBuilder.Entity("Stockable_Backend.Model.Markup", b =>
                {
                    b.Property<int>("markupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("markupId"), 1L, 1);

                    b.Property<DateTime>("markupDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("markupPercent")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("markupId");

                    b.ToTable("Markups");
                });

            modelBuilder.Entity("Stockable_Backend.Model.PartsRequest", b =>
                {
                    b.Property<int>("stockId")
                        .HasColumnType("int");

                    b.Property<int>("purchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("qty")
                        .HasColumnType("int");

                    b.HasKey("stockId", "purchaseOrderId");

                    b.HasIndex("purchaseOrderId");

                    b.ToTable("PartsRequests");
                });

            modelBuilder.Entity("Stockable_Backend.Model.PaymentType", b =>
                {
                    b.Property<int>("paymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("paymentTypeId"), 1L, 1);

                    b.Property<string>("paymentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("paymentTypeId");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("Stockable_Backend.Model.PDFHelpDoc", b =>
                {
                    b.Property<int>("docId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("docId"), 1L, 1);

                    b.Property<byte[]>("pdfContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("userType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("docId");

                    b.ToTable("PDFHelpDocs");
                });

            modelBuilder.Entity("Stockable_Backend.Model.Price", b =>
                {
                    b.Property<int>("priceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("priceId"), 1L, 1);

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<DateTime>("priceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("stockId")
                        .HasColumnType("int");

                    b.HasKey("priceId");

                    b.HasIndex("stockId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("Stockable_Backend.Model.PrinterStatus", b =>
                {
                    b.Property<int>("printerStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("printerStatusId"), 1L, 1);

                    b.Property<string>("printerStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("printerStatusId");

                    b.ToTable("PrinterStatuses");
                });

            modelBuilder.Entity("Stockable_Backend.Model.Province", b =>
                {
                    b.Property<int>("provinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("provinceId"), 1L, 1);

                    b.Property<string>("provinceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("provinceId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("Stockable_Backend.Model.PurchaseOrder", b =>
                {
                    b.Property<int>("purchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("purchaseOrderId"), 1L, 1);

                    b.Property<DateTime>("purchaseOrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("purchaseOrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("repairId")
                        .HasColumnType("int");

                    b.Property<int>("repairTime")
                        .HasColumnType("int");

                    b.HasKey("purchaseOrderId");

                    b.HasIndex("purchaseOrderStatusId");

                    b.HasIndex("repairId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("Stockable_Backend.Model.PurchaseOrderStatus", b =>
                {
                    b.Property<int>("purchaseOrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("purchaseOrderStatusId"), 1L, 1);

                    b.Property<string>("purchaseOrderStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("purchaseOrderStatusId");

                    b.ToTable("PurchaseOrderStatuses");
                });

            modelBuilder.Entity("Stockable_Backend.Model.Repair", b =>
                {
                    b.Property<int>("repairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("repairId"), 1L, 1);

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<int>("errorLogId")
                        .HasColumnType("int");

                    b.Property<int>("repairStatusId")
                        .HasColumnType("int");

                    b.HasKey("repairId");

                    b.HasIndex("employeeId");

                    b.HasIndex("errorLogId");

                    b.HasIndex("repairStatusId");

                    b.ToTable("Repairs");
                });

            modelBuilder.Entity("Stockable_Backend.Model.RepairDiagnostic", b =>
                {
                    b.Property<int>("repairId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("diagnosticsId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool>("isComplete")
                        .HasColumnType("bit");

                    b.HasKey("repairId", "diagnosticsId");

                    b.HasIndex("diagnosticsId");

                    b.ToTable("RepairDiagnostics");
                });

            modelBuilder.Entity("Stockable_Backend.Model.RepairOrders", b =>
                {
                    b.Property<int>("repairOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("repairOrderId"), 1L, 1);

                    b.Property<string>("branchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("client")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("labourRate")
                        .HasColumnType("int");

                    b.Property<int>("markUp")
                        .HasColumnType("int");

                    b.Property<int>("repairId")
                        .HasColumnType("int");

                    b.Property<string>("serialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("total")
                        .HasColumnType("int");

                    b.Property<int>("vat")
                        .HasColumnType("int");

                    b.HasKey("repairOrderId");

                    b.ToTable("RepairOrders");
                });

            modelBuilder.Entity("Stockable_Backend.Model.RepairStatus", b =>
                {
                    b.Property<int>("repairStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("repairStatusId"), 1L, 1);

                    b.Property<string>("repairStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("repairStatusId");

                    b.ToTable("RepairStatuses");
                });

            modelBuilder.Entity("Stockable_Backend.Model.RepairStock", b =>
                {
                    b.Property<int>("repairId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("stockId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("purchaseOrderId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("qty")
                        .HasColumnType("int");

                    b.HasKey("repairId", "stockId", "purchaseOrderId");

                    b.HasIndex("purchaseOrderId");

                    b.HasIndex("stockId");

                    b.ToTable("RepairStocks");
                });

            modelBuilder.Entity("Stockable_Backend.Model.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Stockable_Backend.Model.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Stockable_Backend.Model.Stock", b =>
                {
                    b.Property<int>("stockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("stockId"), 1L, 1);

                    b.Property<int>("maxStockThreshold")
                        .HasColumnType("int");

                    b.Property<int>("minStockThreshold")
                        .HasColumnType("int");

                    b.Property<int>("qtyOnHand")
                        .HasColumnType("int");

                    b.Property<string>("stockDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stockName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("stockTypeId")
                        .HasColumnType("int");

                    b.HasKey("stockId");

                    b.HasIndex("stockTypeId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Stockable_Backend.Model.StockCategory", b =>
                {
                    b.Property<int>("stockCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("stockCategoryId"), 1L, 1);

                    b.Property<string>("stockCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("stockCategoryId");

                    b.ToTable("StockCategories");
                });

            modelBuilder.Entity("Stockable_Backend.Model.StockSupplierOrder", b =>
                {
                    b.Property<int>("stockId")
                        .HasColumnType("int");

                    b.Property<int>("supplierOrderId")
                        .HasColumnType("int");

                    b.Property<int>("qty")
                        .HasColumnType("int");

                    b.HasKey("stockId", "supplierOrderId");

                    b.HasIndex("supplierOrderId");

                    b.ToTable("StockSupplierOrders");
                });

            modelBuilder.Entity("Stockable_Backend.Model.StockTake", b =>
                {
                    b.Property<int>("stockTakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("stockTakeId"), 1L, 1);

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("stockTakeDate")
                        .HasColumnType("datetime2");

                    b.HasKey("stockTakeId");

                    b.HasIndex("employeeId");

                    b.ToTable("StockTakes");
                });

            modelBuilder.Entity("Stockable_Backend.Model.StockTakeStock", b =>
                {
                    b.Property<int>("stockId")
                        .HasColumnType("int");

                    b.Property<int>("stockTakeId")
                        .HasColumnType("int");

                    b.Property<int>("qty")
                        .HasColumnType("int");

                    b.HasKey("stockId", "stockTakeId");

                    b.HasIndex("stockTakeId");

                    b.ToTable("StockTakeStock");
                });

            modelBuilder.Entity("Stockable_Backend.Model.StockType", b =>
                {
                    b.Property<int>("stockTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("stockTypeId"), 1L, 1);

                    b.Property<int>("stockCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("stockTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("stockTypeId");

                    b.HasIndex("stockCategoryId");

                    b.ToTable("StockTypes");
                });

            modelBuilder.Entity("Stockable_Backend.Model.Supplier", b =>
                {
                    b.Property<int>("supplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("supplierId"), 1L, 1);

                    b.Property<string>("supplierAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("supplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Stockable_Backend.Model.SupplierOrder", b =>
                {
                    b.Property<int>("supplierOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("supplierOrderId"), 1L, 1);

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<int>("supplierId")
                        .HasColumnType("int");

                    b.Property<int>("supplierOrderStatusId")
                        .HasColumnType("int");

                    b.HasKey("supplierOrderId");

                    b.HasIndex("employeeId");

                    b.HasIndex("supplierId");

                    b.HasIndex("supplierOrderStatusId");

                    b.ToTable("SupplierOrders");
                });

            modelBuilder.Entity("Stockable_Backend.Model.SupplierOrderStatus", b =>
                {
                    b.Property<int>("supplierOrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("supplierOrderStatusId"), 1L, 1);

                    b.Property<string>("supplierOrderStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("supplierOrderStatusId");

                    b.ToTable("SupplierOrderStatuses");
                });

            modelBuilder.Entity("Stockable_Backend.Model.TechnicalServiceReport", b =>
                {
                    b.Property<int>("technicalServiceReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("technicalServiceReportId"), 1L, 1);

                    b.Property<int>("purchaseOrderId")
                        .HasColumnType("int");

                    b.Property<string>("repairsDone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("technicalServiceReportId");

                    b.HasIndex("purchaseOrderId");

                    b.ToTable("TechnicalServiceReports");
                });

            modelBuilder.Entity("Stockable_Backend.Model.TransitPrinter", b =>
                {
                    b.Property<int>("transitPrinterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("transitPrinterId"), 1L, 1);

                    b.Property<int>("assignedPrinterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("errorLogId")
                        .HasColumnType("int");

                    b.Property<string>("technicianId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("transitPrinterId");

                    b.ToTable("TransitPrinters");
                });

            modelBuilder.Entity("Stockable_Backend.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("profilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Stockable_Backend.Model.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Stockable_Backend.Model.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Stockable_Backend.Model.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Stockable_Backend.Model.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Stockable_Backend.Model.VAT", b =>
                {
                    b.Property<int>("vatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("vatId"), 1L, 1);

                    b.Property<DateTime>("vatDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("vatPercent")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("vatId");

                    b.ToTable("Vats");
                });

            modelBuilder.Entity("Stockable_Backend.Model.AssignedPrinter", b =>
                {
                    b.HasOne("Stockable_Backend.Model.Client", "client")
                        .WithMany()
                        .HasForeignKey("clientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.PrinterStatus", "printerStatus")
                        .WithMany()
                        .HasForeignKey("printerStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");

                    b.Navigation("printerStatus");
                });

            modelBuilder.Entity("Stockable_Backend.Model.AssignedTechnician", b =>
                {
                    b.HasOne("Stockable_Backend.Model.Employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.ErrorLog", "errorLog")
                        .WithMany()
                        .HasForeignKey("errorLogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("employee");

                    b.Navigation("errorLog");
                });

            modelBuilder.Entity("Stockable_Backend.Model.Branch", b =>
                {
                    b.HasOne("Stockable_Backend.Model.AssignedPrinter", "assignedPrinter")
                        .WithMany()
                        .HasForeignKey("assignedPrinterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stockable_Backend.Model.City", "city")
                        .WithMany()
                        .HasForeignKey("cityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.Client", "client")
                        .WithMany()
                        .HasForeignKey("clientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("assignedPrinter");

                    b.Navigation("city");

                    b.Navigation("client");
                });

            modelBuilder.Entity("Stockable_Backend.Model.City", b =>
                {
                    b.HasOne("Stockable_Backend.Model.Province", "province")
                        .WithMany()
                        .HasForeignKey("provinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("province");
                });

            modelBuilder.Entity("Stockable_Backend.Model.ClientOrder", b =>
                {
                    b.HasOne("Stockable_Backend.Model.ClientInvoice", "clientInvoice")
                        .WithMany()
                        .HasForeignKey("clientInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.ClientOrderStatus", "clientOrderStatus")
                        .WithMany()
                        .HasForeignKey("clientOrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.ClientUser", "clientUser")
                        .WithMany()
                        .HasForeignKey("clientUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.PaymentType", "paymentType")
                        .WithMany()
                        .HasForeignKey("paymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("clientInvoice");

                    b.Navigation("clientOrderStatus");

                    b.Navigation("clientUser");

                    b.Navigation("paymentType");
                });

            modelBuilder.Entity("Stockable_Backend.Model.ClientOrderStock", b =>
                {
                    b.HasOne("Stockable_Backend.Model.ClientOrder", "clientOrder")
                        .WithMany()
                        .HasForeignKey("clientOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.Stock", "stock")
                        .WithMany()
                        .HasForeignKey("stockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("clientOrder");

                    b.Navigation("stock");
                });

            modelBuilder.Entity("Stockable_Backend.Model.ClientUser", b =>
                {
                    b.HasOne("Stockable_Backend.Model.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.Client", "client")
                        .WithMany()
                        .HasForeignKey("clientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("branch");

                    b.Navigation("client");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Stockable_Backend.Model.ClientUserRequest", b =>
                {
                    b.HasOne("Stockable_Backend.Model.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("branch");
                });

            modelBuilder.Entity("Stockable_Backend.Model.Diagnostics", b =>
                {
                    b.HasOne("Stockable_Backend.Model.Repair", "repair")
                        .WithMany()
                        .HasForeignKey("repairId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("repair");
                });

            modelBuilder.Entity("Stockable_Backend.Model.Employee", b =>
                {
                    b.HasOne("Stockable_Backend.Model.EmployeeType", "employeeType")
                        .WithMany()
                        .HasForeignKey("employeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employeeType");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Stockable_Backend.Model.ErrorLog", b =>
                {
                    b.HasOne("Stockable_Backend.Model.AssignedPrinter", "assignedPrinter")
                        .WithMany()
                        .HasForeignKey("assignedPrinterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.ClientUser", "clientUser")
                        .WithMany()
                        .HasForeignKey("clientUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.ErrorCode", "errorCode")
                        .WithMany()
                        .HasForeignKey("errorCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.ErrorLogStatus", "errorLogStatus")
                        .WithMany()
                        .HasForeignKey("errorLogStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("assignedPrinter");

                    b.Navigation("clientUser");

                    b.Navigation("errorCode");

                    b.Navigation("errorLogStatus");
                });

            modelBuilder.Entity("Stockable_Backend.Model.Hub", b =>
                {
                    b.HasOne("Stockable_Backend.Model.City", "city")
                        .WithMany()
                        .HasForeignKey("cityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("city");
                });

            modelBuilder.Entity("Stockable_Backend.Model.HubUser", b =>
                {
                    b.HasOne("Stockable_Backend.Model.Hub", "hub")
                        .WithMany()
                        .HasForeignKey("hubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.User", "user")
                        .WithMany()
                        .HasForeignKey("userId1");

                    b.Navigation("hub");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Stockable_Backend.Model.PartsRequest", b =>
                {
                    b.HasOne("Stockable_Backend.Model.PurchaseOrder", "purchaseOrder")
                        .WithMany()
                        .HasForeignKey("purchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.Stock", "stock")
                        .WithMany()
                        .HasForeignKey("stockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("purchaseOrder");

                    b.Navigation("stock");
                });

            modelBuilder.Entity("Stockable_Backend.Model.Price", b =>
                {
                    b.HasOne("Stockable_Backend.Model.Stock", "stock")
                        .WithMany()
                        .HasForeignKey("stockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("stock");
                });

            modelBuilder.Entity("Stockable_Backend.Model.PurchaseOrder", b =>
                {
                    b.HasOne("Stockable_Backend.Model.PurchaseOrderStatus", "purchaseOrderStatus")
                        .WithMany()
                        .HasForeignKey("purchaseOrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.Repair", "repair")
                        .WithMany()
                        .HasForeignKey("repairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("purchaseOrderStatus");

                    b.Navigation("repair");
                });

            modelBuilder.Entity("Stockable_Backend.Model.Repair", b =>
                {
                    b.HasOne("Stockable_Backend.Model.Employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.ErrorLog", "errorLog")
                        .WithMany()
                        .HasForeignKey("errorLogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.RepairStatus", "repairStatus")
                        .WithMany()
                        .HasForeignKey("repairStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("employee");

                    b.Navigation("errorLog");

                    b.Navigation("repairStatus");
                });

            modelBuilder.Entity("Stockable_Backend.Model.RepairDiagnostic", b =>
                {
                    b.HasOne("Stockable_Backend.Model.Diagnostics", "diagnostics")
                        .WithMany()
                        .HasForeignKey("diagnosticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.Repair", "repair")
                        .WithMany()
                        .HasForeignKey("repairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("diagnostics");

                    b.Navigation("repair");
                });

            modelBuilder.Entity("Stockable_Backend.Model.RepairStock", b =>
                {
                    b.HasOne("Stockable_Backend.Model.PurchaseOrder", "purchaseOrder")
                        .WithMany()
                        .HasForeignKey("purchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.Repair", "repair")
                        .WithMany()
                        .HasForeignKey("repairId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.Stock", "stock")
                        .WithMany()
                        .HasForeignKey("stockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("purchaseOrder");

                    b.Navigation("repair");

                    b.Navigation("stock");
                });

            modelBuilder.Entity("Stockable_Backend.Model.RoleClaim", b =>
                {
                    b.HasOne("Stockable_Backend.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stockable_Backend.Model.Stock", b =>
                {
                    b.HasOne("Stockable_Backend.Model.StockType", "stockType")
                        .WithMany()
                        .HasForeignKey("stockTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("stockType");
                });

            modelBuilder.Entity("Stockable_Backend.Model.StockSupplierOrder", b =>
                {
                    b.HasOne("Stockable_Backend.Model.Stock", "stock")
                        .WithMany()
                        .HasForeignKey("stockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.SupplierOrder", "supplierOrder")
                        .WithMany()
                        .HasForeignKey("supplierOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("stock");

                    b.Navigation("supplierOrder");
                });

            modelBuilder.Entity("Stockable_Backend.Model.StockTake", b =>
                {
                    b.HasOne("Stockable_Backend.Model.Employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("Stockable_Backend.Model.StockTakeStock", b =>
                {
                    b.HasOne("Stockable_Backend.Model.Stock", "stock")
                        .WithMany()
                        .HasForeignKey("stockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.StockTake", "stockTake")
                        .WithMany()
                        .HasForeignKey("stockTakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("stock");

                    b.Navigation("stockTake");
                });

            modelBuilder.Entity("Stockable_Backend.Model.StockType", b =>
                {
                    b.HasOne("Stockable_Backend.Model.StockCategory", "stockCategory")
                        .WithMany()
                        .HasForeignKey("stockCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("stockCategory");
                });

            modelBuilder.Entity("Stockable_Backend.Model.SupplierOrder", b =>
                {
                    b.HasOne("Stockable_Backend.Model.Employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.Supplier", "supplier")
                        .WithMany()
                        .HasForeignKey("supplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.SupplierOrderStatus", "supplierOrderStatus")
                        .WithMany()
                        .HasForeignKey("supplierOrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");

                    b.Navigation("supplier");

                    b.Navigation("supplierOrderStatus");
                });

            modelBuilder.Entity("Stockable_Backend.Model.TechnicalServiceReport", b =>
                {
                    b.HasOne("Stockable_Backend.Model.PurchaseOrder", "purchaseOrder")
                        .WithMany()
                        .HasForeignKey("purchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("purchaseOrder");
                });

            modelBuilder.Entity("Stockable_Backend.Model.UserClaim", b =>
                {
                    b.HasOne("Stockable_Backend.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stockable_Backend.Model.UserLogin", b =>
                {
                    b.HasOne("Stockable_Backend.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stockable_Backend.Model.UserRole", b =>
                {
                    b.HasOne("Stockable_Backend.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stockable_Backend.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stockable_Backend.Model.UserToken", b =>
                {
                    b.HasOne("Stockable_Backend.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
